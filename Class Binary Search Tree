public class Node_BST {
    private int key;
    Node_BST left;
    Node_BST right;

    public Node_BST() {
    }

    public Node_BST(int key) {
        this.key = key;
        this.left = null;
        this.right = null;
    }

    public int getKey() {
        return key;
    }

    public void setKey(int key) {
        this.key = key;
    }

}
---------------------------------------------------------------
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class BinarySearchTree {
    Node_BST root;

    public BinarySearchTree() {
        root = null;
    }
    //--------------------- insert a node in BST-----------------------------

    public void insert(int key) {
        root = insert_rec(root, key);
    }

    private Node_BST insert_rec(Node_BST root, int key) {
        //tree is empty
        if (root == null) {
            return new Node_BST(key);
        }
        //traverse the tree
        if (key < root.getKey()) {   //insert in the left subtree
            root.left = insert_rec(root.left, key);
        } else if (key > root.getKey()) {   //insert in the right subtree
            root.right = insert_rec(root.right, key);
        }
        return root;
    }

    // ----------------delete a node from BST---------------------------------
    public void deleteKey(int key) {
        root = delete_rec(root, key);
    }

    private Node_BST delete_rec(Node_BST root, int key) {
        //tree is empty
        if (root == null) {
            return root;
        }
        //traverse the tree
        if (key < root.getKey()) {   //traverse left subtree
            root.left = delete_rec(root.left, key);
        } else if (key > root.getKey()) {  //traverse right subtree
            root.right = delete_rec(root.right, key);
        } else {    // node contains only one child
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }
            // node has two children;
            //get inorder successor (min value in the right subtree)
            root.setKey(minValue(root.right));
            // Delete the inorder successor
            root.right = delete_rec(root.right, root.getKey());
        }
        return root;
    }

    //---------------find minimum value---------------------------------------
    public int minValue(Node_BST root) {
        //initially minval = root
        int minval = root.getKey();
        //find minvalue;
        while (root.left != null) {
            minval = root.left.getKey();
            root = root.left;
        }
        return minval;
    }

    //------------------------ Search Operation In BST------------------------
    public boolean search(int key) {
        root = search_rec(root, key);
        return (root != null) ? true : false;
    }

    private Node_BST search_rec(Node_BST root, int key) {
        if (root == null || root.getKey() == key) {  //root is null or key is present at root
            return root;
        }
        if (key < root.getKey()) {  // val is greater than root's key
            return search_rec(root.left, key);
        }
        // val is less than root's key
        return search_rec(root.right, key);
    }

    //-------------------------Update ---------------------------------------
    public void update(int oldKey, int newKey) {
        // Delete the element with the old key
        deleteKey(oldKey);

        // Insert a new element with the new key
        insert(newKey);
    }
    //-------------------------Type Of Printing using BST---------------------

    // -------------- print all element use inorder BST------------------------
    public void inOrder() {  // Left -> Root -> Rigth .
        inOrder_rec(root);
    }

    private void inOrder_rec(Node_BST root) { // left -> Root -> Right
        if (root != null) {
            inOrder_rec(root.left);
            System.out.print(root.getKey() + " ");
            inOrder_rec(root.right);
        }
    }

    // -------------- print all element use preorder BST------------------------
    public void preOrder() {  //  Root -> Left ->Rigth .
        preOrder_rec(root);
    }

    private void preOrder_rec(Node_BST root) { // Root -> Left -> Right .
        if (root != null) {
            System.out.print(root.getKey() + " ");
            inOrder_rec(root.left);
            inOrder_rec(root.right);
        }
    }

    // -------------- print all element use postorder BST-----------------------
    public void postOrder() {  // Left -> Right -> Root .
        preOrder_rec(root);
    }

    private void postOrder_rec(Node_BST root) { //   Left -> Right -> Root.
        if (root != null) {
            inOrder_rec(root.left);
            inOrder_rec(root.right);
            System.out.print(root.getKey() + " ");
        }
    }

    //---------------  print all element use level_order BST----------------------
    public void levelOrder(Node_BST root) {
        if (root == null) {
            return;
        }
        Queue<Node_BST> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            Node_BST curr = queue.poll();
            System.out.println(curr.getKey());
            if (curr.left != null) {
                queue.add(curr.left);
            } else if (curr.right != null) {
                queue.add(curr.right);
            }
            queue.remove();
        }
    }

    //---------------------Get All element --------------------------------------
    ArrayList<Integer> list = new ArrayList<>();

    public ArrayList<Integer> getValues() {
        if (root != null) {
            inOrder_rec(root.left);
            list.add(root.getKey());
            inOrder_rec(root.right);
        }
        return list;
    }


}
