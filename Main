import java.util.*;

public class Main {
    public static void main(String[] args) {

        // Create BinarySearchTree, DoublyLinkedList, and HashMap
        BinarySearchTree1 bst = new BinarySearchTree1();
        MyDoublyLinkedList dll = new MyDoublyLinkedList();
        HashMap<Integer, Integer> hm = new HashMap<>();
        Random random = new Random();
        HashSet <Integer> set = new HashSet<>();
        int numValues = 5000;
        // Insert values into data structures
        for (int i =0 ;i < numValues ; i++){
            set.add(random.nextInt(10000));
        }
        if (set.size() != numValues){
            while (set.size() <= numValues){
                set.add(random.nextInt(10000));
            }
        }
        long startTime = System.currentTimeMillis();
        for (Integer x : set) {
            bst.insert(x);
        }
        long endTime = System.currentTimeMillis();
        long bstInsertTime = endTime - startTime;

        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            int x = random.nextInt(10000);
            if (dll.search(x)){
                i--;
                continue;
            }
                dll.add(x);
        }
        endTime = System.currentTimeMillis();
        long dllInsertTime = endTime - startTime;

        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            hm.put(random.nextInt(10000), random.nextInt(10000));
        }
        endTime = System.currentTimeMillis();
        long hmInsertTime = endTime - startTime;
//-----------------------------------------------------------------------------------
        // Remove values from data structures
        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            int x = random.nextInt(10000);
            if (bst.search(x)) {
                bst.deleteKey(x);
            }
        }
        endTime = System.currentTimeMillis();
        long bstRemoveTime = endTime - startTime;

        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            int x = random.nextInt(10000);
            if (dll.search(x))
            dll.removeByelement(x);
        }
        endTime = System.currentTimeMillis();
        long dllRemoveTime = endTime - startTime;

        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            int x = random.nextInt(10000);
            if (hm.containsKey(x)) {
                hm.remove(x);
            }
        }
        endTime = System.currentTimeMillis();
        long hmRemoveTime = endTime - startTime;
//----------------------------------------------------------------------------------
        // Search for values in data structures
        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            bst.search(random.nextInt(10000));
        }
        endTime = System.currentTimeMillis();
        long bstSearchTime = endTime - startTime;

        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            dll.search(random.nextInt(10000));
        }
        endTime = System.currentTimeMillis();
        long dllSearchTime = endTime - startTime;

        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            hm.get(random.nextInt(10000));
        }
        endTime = System.currentTimeMillis();
        long hmSearchTime = endTime - startTime;
//------------------------------------------------------------------------------------
        // Update values in data structures
        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            int oldval = random.nextInt(10000);
            if (bst.search(oldval)) {
                bst.update(oldval, random.nextInt(10000));
            }
        }
        endTime = System.currentTimeMillis();
        long bstUpdateTime = endTime - startTime;

        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            int oldval = random.nextInt(10000);
            if (dll.search(oldval)) {
                dll.Update(oldval, random.nextInt(10000));
            }
        }
        endTime = System.currentTimeMillis();
        long dllUpdateTime = endTime - startTime;

        startTime = System.currentTimeMillis();
        for (int i = 0; i < numValues; i++) {
            int key = random.nextInt(10000);
            int newValue= random.nextInt(10000);
            if (hm.containsKey(key))
            hm.put(key,newValue);
        }
        endTime = System.currentTimeMillis();
        long hmUpdateTime = endTime - startTime;
//-------------------------------------------------------------------------------------
        // Print values in data structures in ascending order
        startTime = System.currentTimeMillis();
        bst.inOrder();
        endTime = System.currentTimeMillis();
        long bstPrintTime = endTime - startTime;

        startTime = System.currentTimeMillis();
        dll.bubbleSort();
        dll.printAllElement();
        endTime = System.currentTimeMillis();
        long dllPrintTime = endTime - startTime;

        startTime = System.currentTimeMillis();

        TreeMap<Integer, Integer> sortedMap = new TreeMap<>(hm);

        for (Map.Entry<Integer, Integer> entry : sortedMap.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());

        }
        endTime = System.currentTimeMillis();
        long hmPrintTime = endTime - startTime;

        // Print results
        System.out.println();
        System.out.println("Operations\t\t\t\t\t Insert\t\tRemove\t\tSearch\t\tUpdate\t\tPrint");
        System.out.println("---------------------------------------------------------------------------------------------------");
        System.out.printf("%s\t\t\t\t%d\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\n", "BinarySearchTree", bstInsertTime, bstRemoveTime, bstSearchTime, bstUpdateTime, bstPrintTime);
        System.out.printf("%s\t\t\t\t%d\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\n", "DoublyLinkedList", dllInsertTime, dllRemoveTime, dllSearchTime, dllUpdateTime, dllPrintTime);
        System.out.printf("%s\t\t\t\t\t\t\t%d\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\n", "HasMap", hmInsertTime, hmRemoveTime, hmSearchTime, hmUpdateTime, hmPrintTime);
    }
}
